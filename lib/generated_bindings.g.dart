// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings to `rust/src/dnssec_proof.h`.
class DnssecProver {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  DnssecProver(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  DnssecProver.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.UnsignedChar> get_txt_proof(
    ffi.Pointer<ffi.Char> sockaddr,
    ffi.Pointer<ffi.Char> query_name,
    ffi.Pointer<ffi.Int> result_len,
    ffi.Pointer<ffi.Pointer<ffi.Char>> error_msg,
  ) {
    return _get_txt_proof(
      sockaddr,
      query_name,
      result_len,
      error_msg,
    );
  }

  late final _get_txt_proofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('get_txt_proof');
  late final _get_txt_proof = _get_txt_proofPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.UnsignedChar> get_a_proof(
    ffi.Pointer<ffi.Char> sockaddr,
    ffi.Pointer<ffi.Char> query_name,
    ffi.Pointer<ffi.Int> result_len,
    ffi.Pointer<ffi.Pointer<ffi.Char>> error_msg,
  ) {
    return _get_a_proof(
      sockaddr,
      query_name,
      result_len,
      error_msg,
    );
  }

  late final _get_a_proofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('get_a_proof');
  late final _get_a_proof = _get_a_proofPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.UnsignedChar> get_aaaa_proof(
    ffi.Pointer<ffi.Char> sockaddr,
    ffi.Pointer<ffi.Char> query_name,
    ffi.Pointer<ffi.Int> result_len,
    ffi.Pointer<ffi.Pointer<ffi.Char>> error_msg,
  ) {
    return _get_aaaa_proof(
      sockaddr,
      query_name,
      result_len,
      error_msg,
    );
  }

  late final _get_aaaa_proofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('get_aaaa_proof');
  late final _get_aaaa_proof = _get_aaaa_proofPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  void free_error_string(
    ffi.Pointer<ffi.Char> error_msg,
  ) {
    return _free_error_string(
      error_msg,
    );
  }

  late final _free_error_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'free_error_string');
  late final _free_error_string =
      _free_error_stringPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();
}
